#!/bin/sh

# Use neovim for vim if present.
[ -x "$(command -v nvim)" ] && alias vim="nvim" vimdiff="nvim -d"

# Use $XINITRC variable if file exists.
[ -f "$XINITRC" ] && alias startx="startx $XINITRC"

# sudo not required for some system commands
for command in mount umount su poweroff reboot zzz nixrb; do
	alias $command="doas $command"
done; unset command

# Verbosity and settings that you pretty much just always are going to want.
alias \
	sudo="doas" \
	rb="reboot" \
	cp="cp -iv" \
	de="sudo nvim" \
	mv="mv -iv" \
	rm="rm -vI" \
	bc="bc -ql" \
	py="python" \
	mkd="mkdir -pv" \
	yt="youtube-dl --add-metadata -i" \
	yta="yt-dlp -x --audio-format m4a" \
	yv="ytfzf -t" \
	t="tmux" \
	ff="clear && fastfetch" \
	ta="tmux a" \
	ffmpeg="ffmpeg -hide_banner" \
	cls="clear; eza -la" \
	clera="clear"

# Colorize commands when possible.
alias \
	ls="eza -l --icons --group-directories-first" \
	cat="bat" \
	xw="setbg" \
	lsa="eza -la" \
	lsl="ls -l" \
	lsla="ls -la" \
	grep="grep --color=auto" \
	ccat="highlight --out-format=ansi"
	# diff="diff --color=auto" \

# These common commands are just too long! Abbreviate them.
alias \
	ka="killall -9" \
	x="nsxiv -t -g 1500x700 ." \
	zj="zellij" \
	za="zellij a" \
	zjp="zellij --layout ~/.config/zellij/layouts/jp_layout.kdl" \
	htop="htop -u $USER" \
	smci="sudo make clean install" \
	smi="sudo make install" \
	mi="make install" \
	smcu="sudo make clean uninstall" \
	smu="sudo make uninstall" \
	mi="make install" \
	m="mupdf" \
	cx="chmod +x" \
	icat="kitten icat --align left" \
	ni="nix-env -iA" \
	nr="nix-env -e" \
	gh="guix home reconfigure ~/.config/guix/home.scm" \
	gp="guix pull" \
	reconf="\sudo -E guix system reconfigure ~/.config/guix/system.scm"
	

alias \
	g="git" \
	gs="git status" \
	trem="transmission-remote" \
	YT="youtube-viewer" \
	sdn="shutdown -h now" \
	qb="qutebrowser" \
	v="$EDITOR" \
	z="zathura" \
	tex="tectonic -Z shell-escape" 

# scratch
alias \
	scs="scratch search" \
	scvp="cd /var/cache/scratchpkg/packages/" \
	rrp="cd ~/.local/src/ports/" 

# Xbps - void
# Install packages
alias xi='sudo xbps-install -Sy'
# Remove packages and dependencies
alias xr='sudo xbps-remove -Ro'
# Search for packages
alias xs='xbps-query -Rs'
# List installed packages
alias xl='xbps-query -l'
# Upgrade all packages
alias xu='sudo xbps-install -Su'
# Show package info
alias xq='xbps-query -R'
# Clean xbps cache and remove orphaned packages
alias xclean='doas xbps-remove -oO && doas rm -r /var/cache/xbps/*'
alias fzp="fuzzypkg"

# alias xbps-src
alias srclean='cd $HOME/.local/src/void-packages/ && ./xbps-src clean-repocache && ./xbps-src clean && ./xbps-src remove-autodeps && rm -rf hostdir/sources/* && xbps-rindex -r ~/.local/src/void-packages/hostdir/binpkgs && xbps-rindex -c ~/.local/src/void-packages/hostdir/binpkgs'
alias srcmp='cd $HOME/.local/src/void-packages/ && ./xbps-src -j $(nproc) pkg'
alias srcmf='cd $HOME/.local/src/void-packages/ && ./xbps-src -j $(nproc) -f pkg'
alias xbo='cd $HOME/.local/src/void-packages/ && ./xbps-src show-options'
alias gup='xu && cd $HOME/.local/src/void-packages && git pull && ./xbps-src bootstrap-update && xclean && srclean'

# xchroot to manage venom ports
alias \
	cr="sudo xchroot /mnt/venom-dev zsh" \
	cvu="for pkg in gopass swaylock-effects chezmoi ; do ../scripts/outdate.sh /home/javier/Venom/main/$pkg ; done"

# Directories
alias \
	tm="cd /tmp" \
	ds="cd ~/.dotfiles" \
	uds="update_dots && hyprctl notify 5 5000 'rgb(458588)' 'fontsize:15  Dotfiles updated correctly'" \
	dof="yazi ~/.dotfiles" \
	mu='yt-dlp "$(ytfzf -I L "$1")" -o - | ffplay - -nodisp -autoexit -loglevel quiet' \
	ytb='yt-dlp -f b "$(ytfzf -I L "$1")" -o - | ffplay - -autoexit -loglevel quiet'


# qemu
alias void-vm='doas qemu-system-x86_64 -m 2G -smp 2 --enable-kvm \
    -name "VoidLinux jpachecoxyz" \
    -boot order=d \
    -drive file=/home/javier/vms/hdd/test.qcow2,format=qcow2,if=virtio \
    -cdrom ~/.local/src/void-mklive/void-jpachecoxyz.iso \
    -device virtio-net,netdev=user0 \
    -netdev user,id=user0 \
    -M q35 \
    -drive if=pflash,format=raw,readonly=on,file=/usr/share/OVMF/x64/OVMF_CODE.fd \
    -drive if=pflash,format=raw,file=/usr/share/OVMF/x64/OVMF_VARS.fd \
    -full-screen \
    -device virtio-serial'

alias w11='qemu-system-x86_64 \
	--enable-kvm \
	-m 8G \
	-smp 4 \
	-cpu qemu64 \
	-drive file=/home/javier/dwls/Rockwell_VM_11/win11.qcow2,media=disk,cache=unsafe \
	-M q35 \
	-full-screen \
	-vga virtio
    '

## Functions.
ecf(){ cd $XDG_CONFIG_HOME && find . -type f,l -printf "%h/%f\n" | \
	fzf --preview 'bat --style=numbers --color=always --line-range :500 {}' \
	--height 30 \
	--prompt="Edit config file: "  \
	--bind 'ctrl-v:execute(bat {1} >/dev/tty)'  \
	--bind 'del:execute(rm -ri {})' \
        --preview-label 'Ctrl-v: Preview' \
	--multi \
	| xargs -r nvim 
	cd - > /dev/null 2>&1 < /dev/null
}

esc(){ cd $XDG_BIN_HOME && find . -type f,l -printf "%h/%f\n" | \
	fzf --preview 'bat --style=numbers --color=always --line-range :500 {}' \
	--height 30 \
	--prompt="Edit script file: " \
        --preview-label 'Ctrl-v: Preview' \
	--bind 'del:execute(rm -ri {})' \
	--bind 'ctrl-v:execute(bat {1} >/dev/tty)' \
	--multi \
	| xargs -r nvim 
	cd - > /dev/null 2>&1 < /dev/null
}

eca(){ cd $XDG_CACHE_HOME && find . -type f,l -printf "%h/%f\n" | \
	fzf --preview 'bat --style=numbers --color=always --line-range :500 {}' \
	--height 30 \
	--prompt="Edit script file: " \
        --preview-label 'Ctrl-v: Preview' \
	--bind 'del:execute(rm -ri {})' \
	--bind 'ctrl-v:execute(bat {1} >/dev/tty)' \
	--multi \
	| xargs -r nvim 
	cd - > /dev/null 2>&1 < /dev/null
}

gap() {
    # Check if the current directory is a Git repository
    if [ ! -d ".git" ]; then
        echo "Not a Git repository."
        return 1
    fi

    # Fetch the latest changes from the remote repository
    git fetch

    # Check if there are any differences between the local and remote branches
    local LOCAL=$(git rev-parse @)
    local REMOTE=$(git rev-parse @{u})
    local BASE=$(git merge-base @ @{u})

    if [ "$LOCAL" = "$REMOTE" ]; then
        echo "The local repository is up to date."
    elif [ "$LOCAL" = "$BASE" ]; then
        echo "Changes detected, pulling updates..."
        git pull
    elif [ "$REMOTE" = "$BASE" ]; then
        echo "You have local changes that need to be pushed."
    else
        echo "The local and remote repositories have diverged."
    fi
}

y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp" > /dev/null 2>&1
}

n ()
{
    # Block nesting of nnn in subshells
    [ "${NNNLVL:-0}" -eq 0 ] || {
        echo "nnn is already running"
        return
    }

    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    command nnn -cdH "$@"

    [ ! -f "$NNN_TMPFILE" ] || {
        . "$NNN_TMPFILE"
        rm -f -- "$NNN_TMPFILE" > /dev/null
    }
}
